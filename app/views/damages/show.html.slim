.page-title 被害の詳細

table.table.table-hover
  tbody
    tr
      th= Damage.human_attribute_name(:title)
      td= @damage.title
    tr
      th= Damage.human_attribute_name(:place)
      td= @damage.place
    tr
      th= Damage.human_attribute_name(:description)
      td= simple_format(h(@damage.description), {}, sanitize: false, wrapper_tag: "div")
    tr
      th= Damage.human_attribute_name(:amount)
      td= @damage.amount&.to_s(:delimited)
    tr
      th= Damage.human_attribute_name(:image)
      td= image_tag @damage.image if @damage.image.attached?
    tr
      th= Damage.human_attribute_name(:created_at)
      td= @damage.created_at
    tr
      th= Damage.human_attribute_name(:updated_at)
      td= @damage.updated_at

- if @damage.user_id == current_user.id
  = link_to '編集', edit_damage_path, class: 'btn btn-primary mr-3'
  = link_to '削除', @damage, method: :delete, data: { confirm: "タスク「#{@damage.title}」を削除します。よろしいですか？" }, class: 'btn btn-danger'


// javascript:
//   console.log('こんにちは');
//   console.log(#{@damage.description});


#map

javascript:
  var map;
  let desc = #{@damage.description};
  function initMap() {
    var target = document.getElementById('map');
    // 表示したいポイント
    var point = {lat: #{@damage.latitude} , lng: #{@damage.longitude} };

    map = new google.maps.Map(target, {
      center: point,
      zoom: 14
    });

    console.log(#{@damage.description});
    //マーカー
    var marker = new google.maps.Marker({
      position: point,
      map: map,
      title: "#{@damage.title}",
      icon: ( desc.indexOf('現地確認未了') != -1 ) ? "http://maps.google.com/mapfiles/ms/micons/red-dot.png" : "http://maps.google.com/mapfiles/ms/micons/blue-dot.png"
    });

  }


script async="" defer="defer" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDD8_DF2AUAtXfZVcQYFUi3T3AslQKAXaw&callback=initMap"








    // handler = Gmaps.build('Google');
    // handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
    //   markers = handler.addMarkers(#{raw @hash.to_json});
    //   handler.bounds.extendWith(markers);
    //   handler.fitMapToBounds();
    //   handler.getMap().setZoom(14);
    // });
